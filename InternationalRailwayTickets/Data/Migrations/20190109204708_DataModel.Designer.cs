// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace InternationalRailwayTickets.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190109204708_DataModel")]
    partial class DataModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InternationalRailwayTickets.Data.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ServiceClass")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.CarInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ServiceClass")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("CarInstances");
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CarId");

                    b.Property<long>("Floor");

                    b.Property<long>("Level");

                    b.Property<long>("Number");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.PlaceInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CarId");

                    b.Property<long>("Floor");

                    b.Property<long>("Level");

                    b.Property<long>("Number");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("PlaceInstances");
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("StartTime");

                    b.HasKey("Id");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.RoutePoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("FromStartTime");

                    b.Property<Guid?>("RouteId");

                    b.Property<Guid>("StationId");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("StationId");

                    b.ToTable("RoutePoints");
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<DateTime>("FromDate");

                    b.HasKey("Id");

                    b.ToTable("Schedule");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Schedule");
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DocumentNumber")
                        .IsRequired();

                    b.Property<string>("DocumentType")
                        .IsRequired();

                    b.Property<Guid?>("FromPointId");

                    b.Property<bool>("Paid");

                    b.Property<string>("PassengerName")
                        .IsRequired();

                    b.Property<Guid?>("PlaceInstanceId");

                    b.Property<Guid?>("ToPointId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FromPointId");

                    b.HasIndex("PlaceInstanceId");

                    b.HasIndex("ToPointId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.Train", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Number")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Trains");
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.TrainCar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CarId");

                    b.Property<Guid?>("FromPointId");

                    b.Property<long>("Number");

                    b.Property<Guid?>("ToPointId");

                    b.Property<Guid>("TrainScheduleId");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("FromPointId");

                    b.HasIndex("ToPointId");

                    b.HasIndex("TrainScheduleId");

                    b.ToTable("TrainCars");
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.TrainCarInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CarId");

                    b.Property<Guid?>("FromPointId");

                    b.Property<long>("Number");

                    b.Property<Guid?>("ToPointId");

                    b.Property<Guid>("TrainId");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique();

                    b.HasIndex("FromPointId");

                    b.HasIndex("ToPointId");

                    b.HasIndex("TrainId");

                    b.ToTable("TrainCarInstances");
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.TrainInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Number")
                        .IsRequired();

                    b.Property<Guid>("RouteId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("TrainInstances");
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.TrainSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("FromDate");

                    b.Property<Guid>("RouteId");

                    b.Property<Guid>("ScheduleId");

                    b.Property<DateTime>("ToDate");

                    b.Property<Guid>("TrainId");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TrainId");

                    b.ToTable("TrainSchedules");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.DailySchedule", b =>
                {
                    b.HasBaseType("InternationalRailwayTickets.Data.Schedule");

                    b.Property<long>("EveryNDay");

                    b.HasDiscriminator().HasValue("DailySchedule");
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.Place", b =>
                {
                    b.HasOne("InternationalRailwayTickets.Data.Car", "Car")
                        .WithMany("Places")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.PlaceInstance", b =>
                {
                    b.HasOne("InternationalRailwayTickets.Data.CarInstance", "Car")
                        .WithMany("Places")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.RoutePoint", b =>
                {
                    b.HasOne("InternationalRailwayTickets.Data.Route")
                        .WithMany("Points")
                        .HasForeignKey("RouteId");

                    b.HasOne("InternationalRailwayTickets.Data.Station", "Station")
                        .WithMany("RoutePoints")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.Ticket", b =>
                {
                    b.HasOne("InternationalRailwayTickets.Data.RoutePoint", "FromPoint")
                        .WithMany()
                        .HasForeignKey("FromPointId");

                    b.HasOne("InternationalRailwayTickets.Data.PlaceInstance", "PlaceInstance")
                        .WithMany("Ticket")
                        .HasForeignKey("PlaceInstanceId");

                    b.HasOne("InternationalRailwayTickets.Data.RoutePoint", "ToPoint")
                        .WithMany()
                        .HasForeignKey("ToPointId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.TrainCar", b =>
                {
                    b.HasOne("InternationalRailwayTickets.Data.Car", "Car")
                        .WithMany("TrainCar")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternationalRailwayTickets.Data.RoutePoint", "FromPoint")
                        .WithMany()
                        .HasForeignKey("FromPointId");

                    b.HasOne("InternationalRailwayTickets.Data.RoutePoint", "ToPoint")
                        .WithMany()
                        .HasForeignKey("ToPointId");

                    b.HasOne("InternationalRailwayTickets.Data.TrainSchedule", "TrainSchedule")
                        .WithMany("TrainCars")
                        .HasForeignKey("TrainScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.TrainCarInstance", b =>
                {
                    b.HasOne("InternationalRailwayTickets.Data.CarInstance", "Car")
                        .WithOne("TrainCar")
                        .HasForeignKey("InternationalRailwayTickets.Data.TrainCarInstance", "CarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternationalRailwayTickets.Data.RoutePoint", "FromPoint")
                        .WithMany()
                        .HasForeignKey("FromPointId");

                    b.HasOne("InternationalRailwayTickets.Data.RoutePoint", "ToPoint")
                        .WithMany()
                        .HasForeignKey("ToPointId");

                    b.HasOne("InternationalRailwayTickets.Data.TrainInstance", "Train")
                        .WithMany("TrainCars")
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.TrainInstance", b =>
                {
                    b.HasOne("InternationalRailwayTickets.Data.Route", "Route")
                        .WithMany("TrainInstances")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InternationalRailwayTickets.Data.TrainSchedule", b =>
                {
                    b.HasOne("InternationalRailwayTickets.Data.Route", "Route")
                        .WithMany("TrainSchedules")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternationalRailwayTickets.Data.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternationalRailwayTickets.Data.Train", "Train")
                        .WithMany("TrainSchedules")
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
